type Clusters {
  topic: String
  post: [Post] @materializer(query: "getPostUsingPost_cluster_id_fkey")
  id: ID!
  created_at: DateTime
}

type Comment {
  username: String
  text: String
  post_id: ID
  post: Post @materializer(query: "getPost")
  id: ID!
  created_at: DateTime
}

type Likes {
  username: String
  post_id: ID
  post: Post @materializer(query: "getPostUsingLikes_post_id_fkey")
  like: Boolean
  id: ID!
  created_at: DateTime
}

type Post {
  username: String
  title: String
  likes: [Likes] @materializer(query: "getLikes")
  image: String
  id: ID!
  created_at: DateTime
  comment: [Comment] @materializer(query: "getComment")
  clusters: Clusters @materializer(query: "getClusters")
  cluster_id: ID
  body: String
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Clusters' "
  clusters(id: ID!): Clusters
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Clusters"
      configuration: "postgresql_config"
    )
  clustersList: [Clusters]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Clusters"
      configuration: "postgresql_config"
    )
  clustersPaginatedList(first: Int, after: Int): [Clusters]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "Clusters" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getClusters(cluster_id: ID!): Clusters
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "Clusters" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Comment' "
  comment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      configuration: "postgresql_config"
    )
  commentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "Comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getComment(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "username" FROM "Comment" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Likes' "
  getLikes(id: ID!): [Likes]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "like", "post_id", "username" FROM "Likes" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  likes(id: ID!): Likes
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Likes"
      configuration: "postgresql_config"
    )
  likesList: [Likes]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Likes"
      configuration: "postgresql_config"
    )
  likesPaginatedList(first: Int, after: Int): [Likes]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "like", "post_id", "username" FROM "Likes" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Post' "
  getPost(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "cluster_id", "created_at", "id", "image", "title", "username" FROM "Post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingLikes_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "cluster_id", "created_at", "id", "image", "title", "username" FROM "Post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  getPostUsingPost_cluster_id_fkey(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "cluster_id", "created_at", "id", "image", "title", "username" FROM "Post" WHERE "cluster_id" = $1
      """
      configuration: "postgresql_config"
    )
  post(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Post"
      configuration: "postgresql_config"
    )
  postList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Post"
      configuration: "postgresql_config"
    )
  postPaginatedList(first: Int, after: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "cluster_id", "created_at", "id", "image", "title", "username" FROM "Post" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Clusters' "
  deleteClusters(id: ID!): Clusters
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Clusters"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertClusters(topic: String, created_at: DateTime): Clusters
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Clusters"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateClusters(id: ID!, created_at: DateTime, topic: String): Clusters
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Clusters" SET
        "created_at" = COALESCE($2, "created_at"),
        "topic" = COALESCE($3, "topic")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    username: String
    post_id: ID
    text: String
    created_at: DateTime
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    post_id: ID
    text: String
    username: String
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "post_id" = COALESCE($3, "post_id"),
        "text" = COALESCE($4, "text"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Likes' "
  deleteLikes(id: ID!): Likes
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Likes"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertLikes(
    username: String
    post_id: ID
    created_at: DateTime
    like: Boolean
  ): Likes
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Likes"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateLikes(
    id: ID!
    created_at: DateTime
    like: Boolean
    post_id: ID
    username: String
  ): Likes
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Likes" SET
        "created_at" = COALESCE($2, "created_at"),
        "like" = COALESCE($3, "like"),
        "post_id" = COALESCE($4, "post_id"),
        "username" = COALESCE($5, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Post' "
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String
    created_at: DateTime
    title: String
    cluster_id: ID
    username: String
    image: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePost(
    id: ID!
    body: String
    cluster_id: ID
    created_at: DateTime
    image: String
    title: String
    username: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Post" SET
        "body" = COALESCE($2, "body"),
        "cluster_id" = COALESCE($3, "cluster_id"),
        "created_at" = COALESCE($4, "created_at"),
        "image" = COALESCE($5, "image"),
        "title" = COALESCE($6, "title"),
        "username" = COALESCE($7, "username")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
